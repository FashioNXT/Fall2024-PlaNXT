<div class="modal fade" id="createModal" tabindex="-1" aria-labelledby="createModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="createModalLabel"></h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <!-- Width -->
                <div class="row align-items-center mb-3">
                    <div class="col-3">
                        <label for="createItemWidth" class="col-form-label">Width (inch)</label>
                    </div>
                    <div class="col-9">
                        <input type="number" id="createItemWidth" class="form-control">
                    </div>
                </div>

                <!-- Depth -->
                <div class="row align-items-center mb-3">
                    <div class="col-3">
                        <label for="createItemDepth" class="col-form-label">Depth (inch)</label>
                    </div>
                    <div class="col-9">
                        <input type="number" id="createItemDepth" class="form-control">
                    </div>
                </div>

                <!-- Rotation -->
                <div class="row align-items-center mb-3">
                    <div class="col-3">
                        <label for="createItemRotation" class="col-form-label">Rotation</label>
                    </div>
                    <div class="col-9">
                        <input type="number" id="createItemRotation" class="form-control">
                    </div>
                </div>

                <!-- Description -->
                <div class="row align-items-center mb-3">
                    <div class="col-3">
                        <label for="createItemDescription" class="col-form-label">Description</label>
                    </div>
                    <div class="col-9">
                        <input id="createItemDescription" class="form-control">
                    </div>
                </div>

                 <div class="row align-items-center mb-3">
                    <div class="col-3">
                        <label for="createItemDependencies" class="col-form-label">Dependencies</label>
                    </div>
                    <div class="col-9">
                        <select id="createItemDependencies" class="form-select" multiple>
                            <!-- Options will be populated dynamically -->
                        </select>
                    </div>
                </div>

                <div class="row g-3 align-items-center mb-3" style="margin-top:1em">
                    <div class="col-3">
                        <label for="createItemSetupStartTime" class="col-form-label">Setup Start</label>
                    </div>
                    <div class="col-9">
                        <input type="datetime-local" id="createItemSetupStartTime" class="form-control datetimepicker-input">
                    </div>
                </div>

                <!-- Setup End -->
                <div class="row align-items-center mb-3">
                    <div class="col-3">
                        <label for="createItemSetupDuration" class="col-form-label">Setup Duration (mins)</label>
                    </div>
                    <div class="col-3">
                        <input type="number" id="createItemSetupDuration" class="form-control">
                    </div>
                    <div class="col-2">
                        <label for="createItemSetupEndTime" class="col-form-label">Setup End</label>
                    </div>
                    <div class="col-4">
                        <input type="datetime-local" id="createItemSetupEndTime" class="form-control datetimepicker-input" disabled>
                    </div>
                </div>

                <!-- Breakdown Times -->
                <div class="row align-items-center mb-3">
                    <div class="col-3">
                        <label for="createItemBreakdownStartTime" class="col-form-label">Breakdown Start</label>
                    </div>
                    <div class="col-9">
                        <input type="datetime-local" id="createItemBreakdownStartTime" class="form-control datetimepicker-input">
                    </div>
                </div>

                <!-- Breakdown End -->
                <div class="row align-items-center mb-3">
                    <div class="col-3">
                        <label for="createItemBreakdownDuration" class="col-form-label">Breakdown Duration (mins)</label>
                    </div>
                    <div class="col-3">
                        <input type="number" id="createItemBreakdownDuration" class="form-control">
                    </div>
                    <div class="col-2">
                        <label for="createItemBreakdownEndTime" class="col-form-label">Breakdown End</label>
                    </div>
                    <div class="col-4">
                        <input type="datetime-local" id="createItemBreakdownEndTime" class="form-control datetimepicker-input" disabled>
                    </div>
                </div>
            </div>

            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" id="confirmCreateBtn" data-bs-dismiss="modal">Create</button>
            </div>
        </div>
    </div>
</div>

<script>

    // Restrict input to positive integers for duration fields
    document.getElementById('createItemSetupDuration').addEventListener('input', restrictToPositiveIntegers);
    document.getElementById('createItemBreakdownDuration').addEventListener('input', restrictToPositiveIntegers);

    function restrictToPositiveIntegers(event) {
        const inputField = event.target;
        const value = inputField.value;
    
        // Use a regular expression to allow only positive integers
        const sanitizedValue = value.replace(/[^0-9]/g, '');
    
        // If the sanitized value is different, update the field
        if (value !== sanitizedValue) {
            inputField.value = sanitizedValue;
        }
    }

    // Event listeners for dynamic updates
    document.getElementById('createItemSetupStartTime').addEventListener('change', updateSetupEndTime);
    document.getElementById('createItemSetupDuration').addEventListener('input', updateSetupEndTime);
    document.getElementById('createItemBreakdownStartTime').addEventListener('change', updateBreakdownEndTime);
    document.getElementById('createItemBreakdownDuration').addEventListener('input', updateBreakdownEndTime);

    function calculateEndTime(startDate, durationMinutes) {
        const startDateTime = new Date(startDate);
        const endDateTime = new Date(startDateTime.getTime() + durationMinutes * 60000);

        const year = endDateTime.getFullYear();
        const month = String(endDateTime.getMonth() + 1).padStart(2, '0'); // Months are 0-based
        const day = String(endDateTime.getDate()).padStart(2, '0');
        const hours = String(endDateTime.getHours()).padStart(2, '0');
        const minutes = String(endDateTime.getMinutes()).padStart(2, '0');

        return `${year}-${month}-${day}T${hours}:${minutes}`;
    }

    function updateSetupEndTime() {
        const setupStart = document.getElementById('createItemSetupStartTime').value;
        const duration = parseInt(document.getElementById('createItemSetupDuration').value, 10);

        if (setupStart && !isNaN(duration)) {
            // Set the value in the input field
            document.getElementById('createItemSetupEndTime').value = calculateEndTime(setupStart, duration);
        }
    }

    function updateBreakdownEndTime() {
        const breakdownStart = document.getElementById('createItemBreakdownStartTime').value;
        const duration = parseInt(document.getElementById('createItemBreakdownDuration').value, 10);

        if (breakdownStart && !isNaN(duration)) {
            document.getElementById('createItemBreakdownEndTime').value = calculateEndTime(breakdownStart, duration);
        }
    }

    function openCreateModal(item_type, item, x, y, ratio, selectedStepId, loadItems) {

        // Show the delete confirmation modal
        const createModal = new bootstrap.Modal(document.getElementById('createModal'));
        createModal.show();

        document.getElementById('createModalLabel').innerText = `Details: ${item.displayName}`;
        document.getElementById('createItemWidth').value = item.width;
        document.getElementById('createItemDepth').value = item.depth;
        document.getElementById('createItemRotation').value = 0;
        // Fetch all items from the database for the dependency dropdown
        fetch(`/items/search?step_id=${selectedStepId}`)
            .then(response => {
                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }
                return response.json();
            })
            .then(items => {

                const dependencyDropdown = document.getElementById('createItemDependencies');
                dependencyDropdown.innerHTML = ''; // Clear existing options

                items.forEach(function(dependencyItem) {
                    const option = document.createElement('option');
                    option.value = dependencyItem.id;
                    option.textContent = dependencyItem.id + ": " + dependencyItem.name;
                    dependencyDropdown.appendChild(option);
                });
            })
            .catch(error => {
                console.error('Error fetching items for dependencies:', error);
            });


        let slider = document.getElementById('myRange')
        let sliderMinutes = slider.value
        let startTime = new Date(setupStartTime)
        let currTimelineBarTime = new Date(startTime.getTime() + sliderMinutes * 60 * 1000)
        console.log(sliderMinutes, currTimelineBarTime.toISOString())
        document.getElementById('createItemSetupStartTime').value = parseDateTime(currTimelineBarTime)
        document.getElementById('createItemSetupDuration').value = '';
        document.getElementById('createItemSetupEndTime').value = '';
        document.getElementById('createItemBreakdownStartTime').value = parseDateTime(currTimelineBarTime)
        document.getElementById('createItemBreakdownDuration').value = '';
        document.getElementById('createItemBreakdownEndTime').value = '';

        // Set the onclick function for the confirm button
        document.getElementById('confirmCreateBtn').onclick = function() {
            // Get the values from the modal
            var width = document.getElementById('createItemWidth').value;
            var depth = document.getElementById('createItemDepth').value;
            var rotation = document.getElementById('createItemRotation').value;
            var description = document.getElementById('createItemDescription').value;
            const selectedDependencies = Array.from(document.getElementById('createItemDependencies').selectedOptions).map(option => option.value);
            var setupStartTime = document.getElementById('createItemSetupStartTime').value + ":00";
            var setupEndTime = document.getElementById('createItemSetupEndTime').value + ":00";
            var breakdownStartTime = document.getElementById('createItemBreakdownStartTime').value + ":00";
            var breakdownEndTime = document.getElementById('createItemBreakdownEndTime').value + ":00";
            var inch2feet = 1/12;

            // Create the item
            createItem({
                type: item_type,
                real_type: item.real_type,
                name: item.displayName,
                model: item.model,
                
                width: width,
                length: item.length,
                depth: depth,
                rotation: rotation,
                description: description,
                setupStartTime: setupStartTime,
                setupEndTime: setupEndTime,
                breakdownStartTime: breakdownStartTime,
                breakdownEndTime: breakdownEndTime,

                xpos: x/(ratio)+inch2feet*width/2,
                ypos: 0,
                zpos: y/(ratio)+inch2feet*depth/2,
                dependencies: selectedDependencies
            }, selectedStepId, loadItems);
        };
    };

    function createItem(item, selectedStepId, loadItems){
        // AJAX request to update the item with the step_id
        fetch(`/items`, {
          method: 'POST',
          headers: {
            "Content-Type": "application/json",
            "X-CSRF-Token": document.querySelector("[name='csrf-token']").content
          },
          body: JSON.stringify({ item: {
                name: item.name,
                model: item.model,
                width: item.width,
                length: item.length,
                depth: item.depth,
                rotation: item.rotation,
                description: item.description,
                xpos: item.xpos,
                ypos: item.ypos,
                zpos: item.zpos,
                step_id: selectedStepId,
                setup_start_time: item.setupStartTime,
                setup_end_time: item.setupEndTime,
                breakdown_start_time: item.breakdownStartTime,
                breakdown_end_time: item.breakdownEndTime,
                dependencies: item.dependencies

            } 
          })
        })
        .then(data => {
        //   console.log('Item created successfully:', data);
          loadItems(selectedStepId);
        })
        .catch((error) => {
          console.error('Error updating item:', error);
        });
    }

</script>