<div class="modal fade" id="updateModal" tabindex="-1" aria-labelledby="updateModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="updateModalLabel"></h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <!-- Width -->
                <div class="row align-items-center mb-3">
                    <div class="col-3">
                        <label for="updateItemWidth" class="col-form-label">Width (inch)</label>
                    </div>
                    <div class="col-9">
                        <input type="number" id="updateItemWidth" class="form-control">
                    </div>
                </div>

                <!-- Depth -->
                <div class="row align-items-center mb-3">
                    <div class="col-3">
                        <label for="updateItemDepth" class="col-form-label">Depth (inch)</label>
                    </div>
                    <div class="col-9">
                        <input type="number" id="updateItemDepth" class="form-control">
                    </div>
                </div>

                <!-- Rotation -->
                <div class="row align-items-center mb-3">
                    <div class="col-3">
                        <label for="updateItemRotation" class="col-form-label">Rotation</label>
                    </div>
                    <div class="col-9">
                        <input type="number" id="updateItemRotation" class="form-control">
                    </div>
                </div>

                <!-- Description -->
                <div class="row align-items-center mb-3">
                    <div class="col-3">
                        <label for="updateItemDescription" class="col-form-label">Description</label>
                    </div>
                    <div class="col-9">
                        <input id="updateItemDescription" class="form-control">
                    </div>
                </div>

                <!-- Dependency items -->
                <div class="row align-items-center mb-3" style="margin-top:1em">
                    <div class="col-3">
                        <label for="updateItemDependencies" class="col-form-label">Dependencies</label>
                    </div>
                    <div class="col-9">
                        <select id="updateItemDependencies" class="form-select" multiple>
                            <!-- Options will be populated dynamically -->
                        </select>
                    </div>
                </div>

                <!-- Setup Times -->
                <div class="row align-items-center mb-3">
                    <div class="col-3">
                        <label for="updateItemSetupStartTime" class="col-form-label">Setup Start</label>
                    </div>
                    <div class="col-9">
                        <input type="datetime-local" id="updateItemSetupStartTime" class="form-control datetimepicker-input">
                    </div>
                </div>

                <!-- Setup End -->
                <div class="row align-items-center mb-3">
                    <div class="col-3">
                        <label for="updateItemSetupDuration" class="col-form-label">Setup Duration (mins)</label>
                    </div>
                    <div class="col-3">
                        <input type="number" id="updateItemSetupDuration" class="form-control">
                    </div>
                    <div class="col-2">
                        <label for="updateItemSetupEndTime" class="col-form-label">Setup End</label>
                    </div>
                    <div class="col-4">
                        <input type="datetime-local" id="updateItemSetupEndTime" class="form-control datetimepicker-input" disabled>
                    </div>
                </div>

                <!-- Breakdown Times -->
                <div class="row align-items-center mb-3">
                    <div class="col-3">
                        <label for="updateItemBreakdownStartTime" class="col-form-label">Breakdown Start</label>
                    </div>
                    <div class="col-9">
                        <input type="datetime-local" id="updateItemBreakdownStartTime" class="form-control datetimepicker-input">
                    </div>
                </div>

                <!-- Breakdown End -->
                <div class="row align-items-center mb-3">
                    <div class="col-3">
                        <label for="updateItemBreakdownDuration" class="col-form-label">Breakdown Duration (mins)</label>
                    </div>
                    <div class="col-3">
                        <input type="number" id="updateItemBreakdownDuration" class="form-control">
                    </div>
                    <div class="col-2">
                        <label for="updateItemBreakdownEndTime" class="col-form-label">Breakdown End</label>
                    </div>
                    <div class="col-4">
                        <input type="datetime-local" id="updateItemBreakdownEndTime" class="form-control datetimepicker-input" disabled>
                    </div>
                </div>
            </div>

            <div class="modal-footer">
                <button type="button" class="btn btn-danger me-auto" id="confirmDeleteBtn" data-bs-dismiss="modal">Delete</button>
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" id="confirmUpdateBtn" data-bs-dismiss="modal">Update</button>
            </div>
        </div>
    </div>
</div>

<script>

    // Restrict input to positive integers for duration fields
    document.getElementById('updateItemSetupDuration').addEventListener('input', restrictToPositiveIntegers);
    document.getElementById('updateItemBreakdownDuration').addEventListener('input', restrictToPositiveIntegers);

    function restrictToPositiveIntegers(event) {
        const inputField = event.target;
        const value = inputField.value;
    
        // Use a regular expression to allow only positive integers
        const sanitizedValue = value.replace(/[^0-9]/g, '');
    
        // If the sanitized value is different, update the field
        if (value !== sanitizedValue) {
            inputField.value = sanitizedValue;
        }
    }

    document.getElementById('updateItemSetupStartTime').addEventListener('change', updateSetupEndTime);
    document.getElementById('updateItemSetupDuration').addEventListener('input', updateSetupEndTime);
    document.getElementById('updateItemBreakdownStartTime').addEventListener('change', updateBreakdownEndTime);
    document.getElementById('updateItemBreakdownDuration').addEventListener('input', updateBreakdownEndTime);

    function updateSetupEndTime() {
        const setupStart = document.getElementById('updateItemSetupStartTime').value;
        const duration = parseInt(document.getElementById('updateItemSetupDuration').value, 10);

        if (setupStart && !isNaN(duration)) {
            document.getElementById('updateItemSetupEndTime').value = calculateEndTime(setupStart, duration);
        }
    }

    function updateBreakdownEndTime() {
        const breakdownStart = document.getElementById('updateItemBreakdownStartTime').value;
        const duration = parseInt(document.getElementById('updateItemBreakdownDuration').value, 10);

        if (breakdownStart && !isNaN(duration)) {
            document.getElementById('updateItemBreakdownEndTime').value = calculateEndTime(breakdownStart, duration);
        }
    }

    function calculateEndTime(startDate, durationMinutes) {
        const startDateTime = new Date(startDate);
        const endDateTime = new Date(startDateTime.getTime() + durationMinutes * 60000);

        const year = endDateTime.getFullYear();
        const month = String(endDateTime.getMonth() + 1).padStart(2, '0'); // Months are 0-based
        const day = String(endDateTime.getDate()).padStart(2, '0');
        const hours = String(endDateTime.getHours()).padStart(2, '0');
        const minutes = String(endDateTime.getMinutes()).padStart(2, '0');

        return `${year}-${month}-${day}T${hours}:${minutes}`;
    }

    function calculateDuration(startTime, endTime) {
        const start = new Date(startTime);
        const end = new Date(endTime);
    
        if (isNaN(start) || isNaN(end)) {
            console.error("Invalid start or end time provided.");
            return 0;
        }
    
        // Calculate the difference in milliseconds and convert to minutes
        duration = Math.round((end - start) / 60000); // Duration in minutes
        if(duration < 0) {
            duration = '';
        }
        return duration;
    }    

    function openUpdateModal(item, selectedStepId, loadItems) {

        // Show the delete confirmation modal
        const updateModal = new bootstrap.Modal(document.getElementById('updateModal'));
        updateModal.show();

        document.getElementById('updateModalLabel').innerText = `Details: ${item.name}`;
        document.getElementById('updateItemWidth').value = item.width;
        document.getElementById('updateItemDepth').value = item.depth;
        document.getElementById('updateItemRotation').value = item.rotation;
        document.getElementById('updateItemDescription').value = item.description;
        document.getElementById('updateItemSetupStartTime').value = parseDateTime(item.setup_start_time);
        document.getElementById('updateItemSetupDuration').value = calculateDuration(item.setup_start_time, item.setup_end_time);
        document.getElementById('updateItemSetupEndTime').value = parseDateTime(item.setup_end_time);
        document.getElementById('updateItemBreakdownStartTime').value = parseDateTime(item.breakdown_start_time);
        document.getElementById('updateItemBreakdownDuration').value = calculateDuration(item.breakdown_start_time, item.breakdown_end_time);
        document.getElementById('updateItemBreakdownEndTime').value = parseDateTime(item.breakdown_end_time);
        // Fetch dependencies for the item being updated
        fetch(`/items/${item.id}/dependencies`)
        .then(response => response.json())
        .then(dependencies => {
            const dependencyIds = new Set(dependencies.map(dep => dep.id));

            fetch(`/items/search?step_id=${selectedStepId}`)
                .then(response => response.json())
                .then(items => {
                    const dependencyDropdown = document.getElementById('updateItemDependencies');
                    dependencyDropdown.innerHTML = '';

                    // Populate the dropdown with items, excluding the current item
                    items.forEach(function(dependencyItem) {
                        if (dependencyItem.id !== item.id) {
                            const option = document.createElement('option');
                            option.value = dependencyItem.id;
                            option.textContent = `${dependencyItem.id}: ${dependencyItem.name}`;

                            // If the item is a dependency, mark it as selected
                            if (dependencyIds.has(dependencyItem.id)) {
                                option.selected = true;
                            }
                            dependencyDropdown.appendChild(option);
                        }
                    });
                    // Add a "None" option at the top for no dependencies
                    const noDependencyOption = document.createElement('option');
                    noDependencyOption.value = '';
                    noDependencyOption.textContent = 'None';
                    noDependencyOption.selected = (dependencyIds.size === 0);
                    dependencyDropdown.insertBefore(noDependencyOption, dependencyDropdown.firstChild);
                })
                .catch(error => {
                    console.error('Error fetching items for dependencies:', error);
                });
        })
        .catch(error => {
            console.error('Error fetching item dependencies:', error);
        });

        // Set the onclick function for the confirm button
        document.getElementById('confirmUpdateBtn').onclick = function() {
            // Get the values from the modal
            var width = document.getElementById('updateItemWidth').value;
            var depth = document.getElementById('updateItemDepth').value;
            var rotation = document.getElementById('updateItemRotation').value;
            var description = document.getElementById('updateItemDescription').value;
            var setupStartTime = document.getElementById('updateItemSetupStartTime').value + ":00";
            var setupEndTime = document.getElementById('updateItemSetupEndTime').value + ":00";
            var breakdownStartTime = document.getElementById('updateItemBreakdownStartTime').value + ":00";
            var breakdownEndTime = document.getElementById('updateItemBreakdownEndTime').value + ":00";
            const selectedDependencies = Array.from(document.getElementById('updateItemDependencies').selectedOptions)
                                                .map(option => option.value)
                                                .filter(value => value !== '');
            var inch2feet = 1/12;
            // update the item
            updateItem({      
                id: item.id,          
                width: width,
                length: item.length,
                depth: depth,
                rotation: rotation,
                description: description,
                setupStartTime: setupStartTime,
                setupEndTime: setupEndTime,
                breakdownStartTime: breakdownStartTime,
                breakdownEndTime: breakdownEndTime,
                dependencies: selectedDependencies,
            }, selectedStepId, loadItems);
        };

        document.getElementById('confirmDeleteBtn').onclick = function() {
            openDeleteConfirmationModal(item.id, item.name, selectedStepId, loadItems);
        };
    };

    function updateItem(item, selectedStepId, loadItems){
        // AJAX request to update the item with the step_id
        fetch(`/items/${item.id}`, {
          method: 'PUT',
          headers: {
            "Content-Type": "application/json",
            "X-CSRF-Token": document.querySelector("[name='csrf-token']").content
          },
          body: JSON.stringify({ item: {
                width: item.width,
                length: item.length,
                depth: item.depth,
                rotation: item.rotation,
                description: item.description,
                setup_start_time: item.setupStartTime,
                setup_end_time: item.setupEndTime,
                breakdown_start_time: item.breakdownStartTime,
                breakdown_end_time: item.breakdownEndTime,
                dependencies: item.dependencies
            } 
          })
        })
        .then(data => {
            // console.log('Item updated successfully:', data);
            loadItems(selectedStepId);
        })
        .catch((error) => {
          console.error('Error updating item:', error);
        });
    }

    function deleteItem(item_id, selectedStepId, loadItems){
        // console.log("delete item: " + item_id);
        // AJAX request to update the item with the step_id
        fetch(`/items/${item_id}`, {
          method: 'DELETE',
          headers: {
            "Content-Type": "application/json",
            "X-CSRF-Token": document.querySelector("[name='csrf-token']").content
          }
        })
        .then(data => {
          // console.log('Item deleted successfully:', data);
          loadItems(selectedStepId);
        })
        .catch((error) => {
          console.error('Error deleting item:', error);
        });
    }

</script>

